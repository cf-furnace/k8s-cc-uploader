package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadDropletParams creates a new UploadDropletParams object
// with the default values initialized.
func NewUploadDropletParams() UploadDropletParams {
	var ()
	return UploadDropletParams{}
}

// UploadDropletParams contains all the bound params for the upload droplet operation
// typically these are obtained from a http.Request
//
// swagger:parameters uploadDroplet
type UploadDropletParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  Required: true
	  In: query
	*/
	CcDropletUploadURI string
	/*
	  Required: true
	  In: body
	*/
	Droplet io.ReadCloser
	/*
	  Required: true
	  In: path
	*/
	GUID string
	/*
	  In: query
	*/
	Timeout *int32
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *UploadDropletParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCcDropletUploadURI, qhkCcDropletUploadURI, _ := qs.GetOK("cc-droplet-upload-uri")
	if err := o.bindCcDropletUploadURI(qCcDropletUploadURI, qhkCcDropletUploadURI, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		o.Droplet = r.Body

	} else {
		res = append(res, errors.Required("droplet", "body"))
	}

	rGUID, rhkGUID, _ := route.Params.GetOK("guid")
	if err := o.bindGUID(rGUID, rhkGUID, route.Formats); err != nil {
		res = append(res, err)
	}

	qTimeout, qhkTimeout, _ := qs.GetOK("timeout")
	if err := o.bindTimeout(qTimeout, qhkTimeout, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadDropletParams) bindCcDropletUploadURI(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("cc-droplet-upload-uri", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("cc-droplet-upload-uri", "query", raw); err != nil {
		return err
	}

	o.CcDropletUploadURI = raw

	return nil
}

func (o *UploadDropletParams) bindGUID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.GUID = raw

	return nil
}

func (o *UploadDropletParams) bindTimeout(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("timeout", "query", "int32", raw)
	}
	o.Timeout = &value

	return nil
}
