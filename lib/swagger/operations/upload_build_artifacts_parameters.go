package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadBuildArtifactsParams creates a new UploadBuildArtifactsParams object
// with the default values initialized.
func NewUploadBuildArtifactsParams() UploadBuildArtifactsParams {
	var ()
	return UploadBuildArtifactsParams{}
}

// UploadBuildArtifactsParams contains all the bound params for the upload build artifacts operation
// typically these are obtained from a http.Request
//
// swagger:parameters uploadBuildArtifacts
type UploadBuildArtifactsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  Required: true
	  In: path
	*/
	AppGUID string
	/*
	  Required: true
	  In: body
	*/
	Artifacts io.ReadCloser
	/*
	  Required: true
	  In: query
	*/
	CcBuildArtifactsUploadURI string
	/*
	  In: query
	*/
	Timeout *int32
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *UploadBuildArtifactsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rAppGUID, rhkAppGUID, _ := route.Params.GetOK("app_guid")
	if err := o.bindAppGUID(rAppGUID, rhkAppGUID, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		o.Artifacts = r.Body

	} else {
		res = append(res, errors.Required("artifacts", "body"))
	}

	qCcBuildArtifactsUploadURI, qhkCcBuildArtifactsUploadURI, _ := qs.GetOK("cc-build-artifacts-upload-uri")
	if err := o.bindCcBuildArtifactsUploadURI(qCcBuildArtifactsUploadURI, qhkCcBuildArtifactsUploadURI, route.Formats); err != nil {
		res = append(res, err)
	}

	qTimeout, qhkTimeout, _ := qs.GetOK("timeout")
	if err := o.bindTimeout(qTimeout, qhkTimeout, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadBuildArtifactsParams) bindAppGUID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.AppGUID = raw

	return nil
}

func (o *UploadBuildArtifactsParams) bindCcBuildArtifactsUploadURI(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("cc-build-artifacts-upload-uri", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("cc-build-artifacts-upload-uri", "query", raw); err != nil {
		return err
	}

	o.CcBuildArtifactsUploadURI = raw

	return nil
}

func (o *UploadBuildArtifactsParams) bindTimeout(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("timeout", "query", "int32", raw)
	}
	o.Timeout = &value

	return nil
}
