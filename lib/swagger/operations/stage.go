package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// StageHandlerFunc turns a function with the right signature into a stage handler
type StageHandlerFunc func(StageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StageHandlerFunc) Handle(params StageParams) middleware.Responder {
	return fn(params)
}

// StageHandler interface for that can handle valid stage params
type StageHandler interface {
	Handle(StageParams) middleware.Responder
}

// NewStage creates a new http.Handler for the stage operation
func NewStage(ctx *middleware.Context, handler StageHandler) *Stage {
	return &Stage{Context: ctx, Handler: handler}
}

/*Stage swagger:route PUT /staging/{staging_guid} stage

Stage stage API

*/
type Stage struct {
	Context *middleware.Context
	Handler StageHandler
}

func (o *Stage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewStageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
