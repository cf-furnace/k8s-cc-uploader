package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UploadBuildArtifactsHandlerFunc turns a function with the right signature into a upload build artifacts handler
type UploadBuildArtifactsHandlerFunc func(UploadBuildArtifactsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadBuildArtifactsHandlerFunc) Handle(params UploadBuildArtifactsParams) middleware.Responder {
	return fn(params)
}

// UploadBuildArtifactsHandler interface for that can handle valid upload build artifacts params
type UploadBuildArtifactsHandler interface {
	Handle(UploadBuildArtifactsParams) middleware.Responder
}

// NewUploadBuildArtifacts creates a new http.Handler for the upload build artifacts operation
func NewUploadBuildArtifacts(ctx *middleware.Context, handler UploadBuildArtifactsHandler) *UploadBuildArtifacts {
	return &UploadBuildArtifacts{Context: ctx, Handler: handler}
}

/*UploadBuildArtifacts swagger:route POST /build_artifacts/{app_guid} uploadBuildArtifacts

UploadBuildArtifacts upload build artifacts API

*/
type UploadBuildArtifacts struct {
	Context *middleware.Context
	Handler UploadBuildArtifactsHandler
}

func (o *UploadBuildArtifacts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewUploadBuildArtifactsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
