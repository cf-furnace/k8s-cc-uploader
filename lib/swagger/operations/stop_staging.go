package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// StopStagingHandlerFunc turns a function with the right signature into a stop staging handler
type StopStagingHandlerFunc func(StopStagingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StopStagingHandlerFunc) Handle(params StopStagingParams) middleware.Responder {
	return fn(params)
}

// StopStagingHandler interface for that can handle valid stop staging params
type StopStagingHandler interface {
	Handle(StopStagingParams) middleware.Responder
}

// NewStopStaging creates a new http.Handler for the stop staging operation
func NewStopStaging(ctx *middleware.Context, handler StopStagingHandler) *StopStaging {
	return &StopStaging{Context: ctx, Handler: handler}
}

/*StopStaging swagger:route DELETE /staging/{staging_guid} stopStaging

StopStaging stop staging API

*/
type StopStaging struct {
	Context *middleware.Context
	Handler StopStagingHandler
}

func (o *StopStaging) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewStopStagingParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
