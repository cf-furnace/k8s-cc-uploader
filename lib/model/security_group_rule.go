package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*SecurityGroupRule security group rule

swagger:model SecurityGroupRule
*/
type SecurityGroupRule struct {

	/* destinations
	 */
	Destinations []string `json:"destinations,omitempty"`

	/* icmp info
	 */
	IcmpInfo *ICMPInfo `json:"icmp_info,omitempty"`

	/* log
	 */
	Log bool `json:"log,omitempty"`

	/* port range
	 */
	PortRange *PortRange `json:"port_range,omitempty"`

	/* ports
	 */
	Ports []int64 `json:"ports,omitempty"`

	/* protocol
	 */
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this security group rule
func (m *SecurityGroupRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIcmpInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePortRange(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGroupRule) validateDestinations(formats strfmt.Registry) error {

	if swag.IsZero(m.Destinations) { // not required
		return nil
	}

	return nil
}

func (m *SecurityGroupRule) validateIcmpInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.IcmpInfo) { // not required
		return nil
	}

	if m.IcmpInfo != nil {

		if err := m.IcmpInfo.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *SecurityGroupRule) validatePortRange(formats strfmt.Registry) error {

	if swag.IsZero(m.PortRange) { // not required
		return nil
	}

	if m.PortRange != nil {

		if err := m.PortRange.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *SecurityGroupRule) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	return nil
}
